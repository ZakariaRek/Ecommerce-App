services:
  # Redis for Rate Limiting and Caching
  redis:
    image: redis:7-alpine
    container_name: gateway-service-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - gateway-network

  # Zipkin for Distributed Tracing
#  zipkin:
#    image: openzipkin/zipkin:latest
#    container_name: gateway-service-zipkin
#    ports:
#      - "9411:9411"
#    environment:
#      - STORAGE_TYPE=mem
#    healthcheck:
#      test: ["CMD-SHELL", "curl -f http://localhost:9411/health || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#    networks:
#      - gateway-network

  # Eureka Service Discovery (Optional - uncomment if using)
  # eureka-server:
  #   image: springcloud/eureka
  #   container_name: gateway-eureka-server
  #   ports:
  #     - "8761:8761"
  #   environment:
  #     - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
  #     - EUREKA_CLIENT_FETCH_REGISTRY=false
  #   healthcheck:
  #     test: ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - gateway-network

  # Kafka (Optional - uncomment if using)
  # zookeeper:
  #   image: confluentinc/cp-zookeeper:latest
  #   container_name: gateway-zookeeper
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - "2181:2181"
  #   networks:
  #     - gateway-network

  # kafka:
  #   image: confluentinc/cp-kafka:latest
  #   container_name: gateway-kafka
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   healthcheck:
  #     test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - gateway-network

  # Gateway Service Application
  gateway-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: gateway-service-app
    depends_on:
      redis:
        condition: service_healthy
#      zipkin:
#        condition: service_healthy
      # eureka-server:
      #   condition: service_healthy
      # kafka:
      #   condition: service_healthy
    ports:
      - "8099:8099"
    environment:
      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # Zipkin Configuration
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411

      # Eureka Configuration (if using)
      # EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://eureka-server:8761/eureka/

      # Kafka Configuration (if using)
      # SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

      # JVM Options
      JAVA_OPTS: "-Xmx1g -Xms512m -XX:+UseG1GC"

      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker

      # Gateway specific environment variables
      CORS_CONFIGURATION_ALLOWED_ORIGINS: "http://localhost:3000,http://localhost:8080,http://localhost:4200"
      CORS_CONFIGURATION_ALLOWED_METHODS: "GET,POST,PUT,DELETE,OPTIONS,PATCH"
      CORS_CONFIGURATION_ALLOWED_HEADERS: "*"
      CORS_CONFIGURATION_ALLOW_CREDENTIALS: "true"
      CORS_CONFIGURATION_MAX_AGE: "3600"

    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8099/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - gateway-network

volumes:
  redis_data:
    driver: local

networks:
  gateway-network:
    driver: bridge