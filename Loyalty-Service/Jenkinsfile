pipeline {
    agent any
    tools {
        maven "Maven-3.9.7"
        jdk 'jdk-21'
    }
    environment {
        COMPOSE_FILE = 'compose.yaml'
        DOCKERHUB_CREDENTIALS = 'yahya.zakaria-dockerhub'
        DOCKERHUB_REPO = 'yahyazakaria123/ecommerce-app-loyalty-service'
        IMAGE_TAG = 'latest'
        GIT_CREDENTIALS_ID = 'git-https-token'
        // Trivy configuration
        TRIVY_CACHE_DIR = 'C:\\temp\\trivy-cache'
        TRIVY_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-db'
        TRIVY_JAVA_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-java-db'
    }
    stages {

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ZakariaRek/Ecommerce-App',
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'Loyalty-Service/']]]
                    ]
                ])
            }
        }

        stage('Build Application') {
            steps {
                dir('Loyalty-Service') {
                    bat 'mvn clean compile'
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('Loyalty-Service') {
                    script {
                        // Run tests but don't fail the pipeline
                        def testResult = bat(
                            script: 'mvn test -Dmaven.test.failure.ignore=true -Dspring.profiles.active=test',
                            returnStatus: true
                        )
                        if (testResult != 0) {
                            echo "‚ö†Ô∏è Some tests failed, but continuing with analysis"
                            env.TESTS_FAILED = 'true'
                        } else {
                            echo "‚úÖ All tests passed!"
                            env.TESTS_FAILED = 'false'
                        }
                    }
                }
            }
            post {
                always {
                    dir('Loyalty-Service') {
                        // Archive test results even if some tests fail
                        junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
                        // Archive JaCoCo coverage report if it exists
                        script {
                            if (fileExists('target/site/jacoco/jacoco.xml')) {
                                echo "‚úÖ JaCoCo coverage report found"
                                archiveArtifacts artifacts: 'target/site/jacoco/**', allowEmptyArchive: true
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Loyalty-Service') {
                    script {
                        echo "üîç Starting SonarQube analysis..."
                        try {
                            // Try with the configured server name
                            withSonarQubeEnv('sonarqube') {
                                bat '''
                                    mvn sonar:sonar ^
                                    -Dsonar.projectKey=ecommerce-loyalty-service ^
                                    -Dsonar.projectName="E-commerce Loyalty Service" ^
                                    -Dsonar.projectVersion=%BUILD_NUMBER% ^
                                    -Dsonar.host.url=%SONAR_HOST_URL% ^
                                    -Dsonar.token=%SONAR_AUTH_TOKEN% ^
                                    -Dmaven.test.failure.ignore=true
                                '''
                            }
                            echo "‚úÖ SonarQube analysis completed using Jenkins configuration"
                        } catch (Exception e) {
                            echo "‚ùå Jenkins SonarQube config failed: ${e.getMessage()}"
                            echo "üîÑ Trying direct connection..."

                            // Fallback: Use direct connection with your token
                            bat '''
                                mvn sonar:sonar ^
                                -Dsonar.projectKey=ecommerce-loyalty-service ^
                                -Dsonar.projectName="E-commerce Loyalty Service" ^
                                -Dsonar.projectVersion=%BUILD_NUMBER% ^
                                -Dsonar.host.url=http://localhost:9000 ^
                                -Dsonar.token=sqa_08e3ba1af16e9a4f7f0ce7b381d391ddee03866f ^
                                -Dmaven.test.failure.ignore=true
                            '''
                            echo "‚úÖ SonarQube analysis completed using direct connection"
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 3, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate failed: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                            } else {
                                echo "‚úÖ Quality Gate passed!"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Quality Gate check failed or timed out: ${e.getMessage()}"
                        echo "üìä Check SonarQube dashboard manually"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Package Application') {
            steps {
                dir('Loyalty-Service') {
                    bat 'mvn package -DskipTests'
                }
            }
        }

        stage('Build Docker Images') {
    steps {
        dir('Loyalty-Service') {
            script {
                // Check if Dockerfile exists
                if (fileExists('Dockerfile')) {
                    bat "docker build -t loyalty-service-loyalty-service:latest -f Dockerfile ."
                } else {
                    error "Dockerfile not found in Loyalty-Service directory"
                }

                // Check if compose file exists
                if (fileExists("${COMPOSE_FILE}")) {
                    bat "docker-compose -f ${COMPOSE_FILE} build"
                } else {
                    error "Docker compose file ${COMPOSE_FILE} not found"
                }
            }
        }
    }
}

       stage('Security Scan with Trivy') {
    steps {
        dir('Loyalty-Service') {
            script {
                try {
                    // Verify image exists before scanning
                    def imageExists = bat(
                        script: 'docker images -q loyalty-service-loyalty-service:latest',
                        returnStatus: true
                    )

                    if (imageExists != 0) {
                        echo "‚ùå Docker image not found, skipping Trivy scan"
                        currentBuild.result = 'UNSTABLE'
                        return
                    }

                    // Continue with existing Trivy logic...
                    echo "üîç Scanning Docker image: loyalty-service-loyalty-service:latest"
                    bat """
                        trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format table --output trivy-report.txt loyalty-service-loyalty-service:latest || echo "Scan completed with warnings"
                    """

                    // Rest of your Trivy code...

                } catch (Exception e) {
                    echo "‚ùå Trivy scan failed: ${e.getMessage()}"
                    currentBuild.result = 'UNSTABLE'
                }
            }
        }
    }
}
        stage('Run Containers') {
            steps {
                dir('Loyalty-Service') {
                    bat "docker-compose -f ${COMPOSE_FILE} up -d"
                    bat 'powershell -Command "Start-Sleep -Seconds 15"'
                    bat "docker-compose -f ${COMPOSE_FILE} ps"
                }
            }
        }

        // stage('Health Check') {
        //     steps {
        //         dir('Loyalty-Service') {
        //             script {
        //                 try {
        //                     // Wait for the service to be ready
        //                     timeout(time: 3, unit: 'MINUTES') {
        //                         waitUntil {
        //                             script {
        //                                 def result = bat(
        //                                     script: 'curl -f http://localhost:8084/loyalty/actuator/health',
        //                                     returnStatus: true
        //                                 )
        //                                 return result == 0
        //                             }
        //                         }
        //                     }
        //                     echo "‚úÖ Loyalty Service health check passed!"
        //                 } catch (Exception e) {
        //                     echo "‚ö†Ô∏è Health check failed or timed out: ${e.getMessage()}"
        //                     currentBuild.result = 'UNSTABLE'
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "Retrieved Docker Hub credentials successfully."
                        bat 'echo %DOCKERHUB_PASSWORD% | docker login -u %DOCKERHUB_USERNAME% --password-stdin'

                        // Tag and push the image
                        bat "docker tag loyalty-service:latest ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        bat "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"

                        // Also tag with build number for versioning
                        bat "docker tag loyalty-service:latest ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"
                        bat "docker push ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"

                        echo "‚úÖ Docker images pushed successfully!"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('Loyalty-Service') {
                    // Clean up containers
                    bat 'docker-compose -f compose.yaml down --remove-orphans || echo "Cleanup completed"'
                }

                // Summary report
                echo "üìã ===== LOYALTY SERVICE PIPELINE SUMMARY ====="
                echo "üèóÔ∏è Build Number: ${BUILD_NUMBER}"
                echo "üìä Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}"
                echo "üîç SonarQube: Analysis completed"
                echo "üîí Security: Trivy scan completed"
                echo "üê≥ Docker: Images built and pushed"
                echo "üíé Service: Loyalty Service (Port 8084)"
                echo "================================"
            }
        }
        success {
            echo 'üéâ Loyalty Service pipeline completed successfully!'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=ecommerce-loyalty-service'
            echo 'üîí Security scan reports available in Build Artifacts'
            echo 'üê≥ Docker images available on Docker Hub'
            echo 'üíé Loyalty Service running on http://localhost:8084/loyalty'
            bat 'docker logout || echo "Logout completed"'
        }
        failure {
            echo 'üí• Loyalty Service pipeline failed!'
            echo 'üîç Check logs and reports for issues'
            echo 'üìä SonarQube: http://localhost:9000/dashboard?id=ecommerce-loyalty-service'
            bat 'docker logout || echo "Logout completed"'
        }
        unstable {
            echo '‚ö†Ô∏è Loyalty Service pipeline completed with warnings!'
            echo 'üìä Quality Gate or tests may have issues'
            echo 'üîç Security vulnerabilities may have been detected'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=ecommerce-loyalty-service'
            echo 'üìÅ Download reports from Build Artifacts section'
        }
    }
}