pipeline {
    agent any
    tools {
        // Go tool - make sure Go 1.24+ is configured in Jenkins
        go "Go-1.24"
        // Reference the SonarQube Scanner configured in Global Tool Configuration (exact name from Jenkins)
      'hudson.plugins.sonar.SonarRunnerInstallation' "Sonarqube Scanner"  // This was correct!
    }
    environment {
        COMPOSE_FILE = 'compose.yaml'
        DOCKERHUB_CREDENTIALS = 'yahya.zakaria-dockerhub'
        DOCKERHUB_REPO = 'yahyazakaria123/ecommerce-app-shipping-service'
        IMAGE_TAG = 'latest'
        GIT_CREDENTIALS_ID = 'GithubCredentials'

        // Go specific environment
        GO_VERSION = '1.24'
        CGO_ENABLED = '0'
        GOOS = 'linux'
        GOARCH = 'amd64'

        // Service configuration
        SERVICE_NAME = 'shipping-service'
        SERVICE_PORT = '8085'

        // Trivy configuration
        TRIVY_CACHE_DIR = 'C:\\temp\\trivy-cache'
        TRIVY_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-db'
        TRIVY_JAVA_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-java-db'
    }
    stages {

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ZakariaRek/Ecommerce-App',
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'Shipping-Service/']]]
                    ]
                ])
            }
        }

        stage('Setup Go Environment') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üîß Setting up Go environment..."
                        bat '''
                            echo "Go version:"
                            go version
                            echo "Go environment:"
                            go env
                            echo "Current directory:"
                            dir
                        '''
                    }
                }
            }
        }

        stage('Download Dependencies') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üì¶ Downloading Go dependencies..."
                        bat '''
                            echo "Downloading dependencies..."
                            go mod download
                            echo "Verifying dependencies..."
                            go mod verify
                            echo "Tidying go.mod..."
                            go mod tidy
                        '''
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üî® Building Go application..."
                        bat '''
                            echo "Building shipping service..."
                            go build -v -o shipping-service.exe main.go
                            echo "Build completed successfully"
                            dir
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üß™ Running tests..."
                        def testResult = bat(
                            script: '''
                                echo "Running Go tests with coverage..."
                                go test -v -cover -coverprofile=coverage.out ./...
                                if exist coverage.out (
                                    echo "Generating coverage report..."
                                    go tool cover -html=coverage.out -o coverage.html
                                    echo "Coverage report generated"
                                ) else (
                                    echo "No coverage file generated"
                                )
                            ''',
                            returnStatus: true
                        )
                        if (testResult != 0) {
                            echo "‚ö†Ô∏è Some tests failed, but continuing with analysis"
                            env.TESTS_FAILED = 'true'
                        } else {
                            echo "‚úÖ All tests passed!"
                            env.TESTS_FAILED = 'false'
                        }
                    }
                }
            }
            post {
                always {
                    dir('Shipping-Service') {
                        // Archive test results and coverage
                        script {
                            if (fileExists('coverage.out')) {
                                echo "‚úÖ Coverage report found"
                                archiveArtifacts artifacts: 'coverage.out,coverage.html', allowEmptyArchive: true
                            }
                        }
                    }
                }
            }
        }

        stage('Code Quality Check') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üîç Running Go code quality checks..."
                        bat '''
                            echo "Running go vet..."
                            go vet ./...
                            echo "Running go fmt check..."
                            go fmt ./...
                            echo "Code quality checks completed"
                        '''
                    }
                }
            }
        }

      stage('SonarQube Analysis') {
    steps {
        dir('Shipping-Service') {
            script {
                echo "üîç Starting SonarQube analysis..."
                try {
                    withSonarQubeEnv('sonarqube') {
                        // Use the tool configuration from Jenkins
                        def scannerHome = tool 'Sonarqube Scanner'
                        bat """
                            echo "Using Scanner from: ${scannerHome}"
                            "${scannerHome}\\bin\\sonar-scanner.bat" ^
                                -Dsonar.projectKey=E-commerce-Shipping-Service ^
                                -Dsonar.projectName="E-commerce Shipping Service" ^
                                -Dsonar.projectVersion=%BUILD_NUMBER% ^
                                -Dsonar.sources=. ^
                                -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/** ^
                                -Dsonar.tests=. ^
                                -Dsonar.test.inclusions=**/*_test.go ^
                                -Dsonar.go.coverage.reportPaths=coverage.out ^
                                -Dsonar.host.url=%SONAR_HOST_URL% ^
                                -Dsonar.token=%SONAR_AUTH_TOKEN%
                        """
                    }
                    echo "‚úÖ SonarQube analysis completed using Jenkins configuration"
                } catch (Exception e) {
                    echo "‚ùå SonarQube analysis failed: ${e.getMessage()}"
                    currentBuild.result = 'UNSTABLE'
                }
            }
        }
    }
}

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        echo "üö¶ Checking Quality Gate..."
                        timeout(time: 2, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate failed: ${qg.status}"
                                echo "üìä Quality Gate Details:"
                                echo "   - Project: ${qg.projectStatus?.projectName ?: 'E-commerce-Shipping-Service'}"
                                echo "   - Status: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                                echo "üîó Check details at: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service"
                            } else {
                                echo "‚úÖ Quality Gate passed!"
                                echo "üéâ Code quality meets the defined standards"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Quality Gate check failed or timed out: ${e.getMessage()}"
                        echo "üìù Possible causes:"
                        echo "   - SonarQube server unreachable"
                        echo "   - Quality Gate not configured"
                        echo "   - Webhook not configured"
                        echo "üìä Check SonarQube dashboard manually: http://localhost:9000"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Production Binary') {
            steps {
                dir('Shipping-Service') {
                    script {
                        echo "üèóÔ∏è Building production binary..."
                        bat '''
                            echo "Building optimized production binary..."
                            set CGO_ENABLED=0
                            set GOOS=linux
                            set GOARCH=amd64
                            go build -a -installsuffix cgo -ldflags="-w -s" -o shipping-service main.go
                            echo "Production binary created successfully"
                            dir
                        '''

                        // Verify binary was created
                        echo "‚úÖ Verifying binary creation..."
                        bat 'dir shipping-service*'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                dir('Shipping-Service') {
                    script {
                        // Debug: List files to see what's available
                        echo "üîç Checking build environment..."
                        bat '''
                            echo "=== Current Directory Structure ==="
                            dir
                            echo "=== Checking for required files ==="
                            if exist main.go (echo "‚úÖ main.go found") else (echo "‚ùå main.go missing")
                            if exist go.mod (echo "‚úÖ go.mod found") else (echo "‚ùå go.mod missing")
                            if exist Dockerfile (echo "‚úÖ Dockerfile found") else (echo "‚ùå Dockerfile missing")
                            if exist shipping-service (echo "‚úÖ Binary found") else (echo "‚ùå Binary missing")
                        '''

                        // Check if binary exists before Docker build
                        script {
                            def binaryExists = bat(script: 'if exist shipping-service (exit 0) else (exit 1)', returnStatus: true)

                            if (binaryExists == 0) {
                                echo "üê≥ Building Docker image..."

                                // Show Dockerfile content for debugging
                                if (fileExists('Dockerfile')) {
                                    echo "üìã Dockerfile contents:"
                                    bat 'type Dockerfile'
                                }

                                // Build Docker image
                                bat "docker build -t ${SERVICE_NAME}:latest ."

                                // Verify image was created
                                bat "docker images ${SERVICE_NAME}:latest"
                                echo "‚úÖ Docker image built successfully"

                                // Skip connectivity test to avoid dependencies
                                echo "‚è≠Ô∏è Skipping Docker image connectivity test to avoid external dependencies"

                            } else {
                                error "‚ùå No binary found! Go build may have failed."
                            }
                        }

                        // Build with docker-compose if available
                        if (fileExists("${COMPOSE_FILE}")) {
                            echo "üê≥ Building with docker-compose..."
                            bat "docker-compose -f ${COMPOSE_FILE} build"
                        } else {
                            echo "üìù No ${COMPOSE_FILE} found, skipping compose build"
                        }
                    }
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                dir('Shipping-Service') {
                    script {
                        try {
                            // Install Trivy if not already installed (Windows)
                            bat '''
                                @echo off
                                where trivy >nul 2>&1
                                if errorlevel 1 (
                                    echo üì• Installing Trivy for Windows...
                                    powershell -Command "Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Windows-64bit.zip -OutFile trivy.zip"
                                    powershell -Command "Expand-Archive -Path trivy.zip -DestinationPath . -Force"
                                    if exist C:\\Windows\\System32\\trivy.exe (
                                        echo ‚úÖ Trivy already in system path
                                    ) else (
                                        move trivy.exe C:\\Windows\\System32\\
                                    )
                                    del trivy.zip
                                    echo ‚úÖ Trivy installed successfully
                                ) else (
                                    echo ‚úÖ Trivy is already installed
                                    trivy --version
                                )
                            '''

                            // Create cache directory
                            bat "if not exist \"${TRIVY_CACHE_DIR}\" mkdir \"${TRIVY_CACHE_DIR}\""

                            // Update Trivy database
                            echo "üìö Updating Trivy vulnerability database..."
                            bat """
                                trivy image --download-db-only --cache-dir "${TRIVY_CACHE_DIR}"
                            """

                            // Scan the Docker image for vulnerabilities
                            echo "üîç Scanning Docker image: ${SERVICE_NAME}:latest"
                            bat """
                                trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format table --output trivy-report.txt ${SERVICE_NAME}:latest || echo "Scan completed with warnings"
                            """

                            // Generate JSON report for detailed analysis
                            bat """
                                trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format json --output trivy-report.json ${SERVICE_NAME}:latest || echo "JSON report completed"
                            """

                            // Check for HIGH and CRITICAL vulnerabilities
                            def exitCode = bat(
                                script: """
                                    trivy image --cache-dir "${TRIVY_CACHE_DIR}" --severity HIGH,CRITICAL --exit-code 1 ${SERVICE_NAME}:latest
                                """,
                                returnStatus: true
                            )

                            // Archive the reports
                            archiveArtifacts artifacts: 'trivy-report.*', fingerprint: true, allowEmptyArchive: true

                            // Set build status based on results
                            if (exitCode == 0) {
                                echo "‚úÖ No HIGH or CRITICAL vulnerabilities found!"
                            } else {
                                echo "‚ö†Ô∏è HIGH or CRITICAL vulnerabilities detected!"
                                echo "üìÑ Please review the security reports in build artifacts"
                                currentBuild.result = 'UNSTABLE'
                            }

                        } catch (Exception e) {
                            echo "‚ùå Trivy scan failed: ${e.getMessage()}"
                            echo "üìÑ This might be due to network issues or missing dependencies"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Run Containers') {
            steps {
                dir('Shipping-Service') {
                    script {
                        // Only run containers if compose file exists and we want to test deployment
                        if (fileExists("${COMPOSE_FILE}")) {
                            echo "üê≥ Starting containers with docker-compose..."
                            bat "docker-compose -f ${COMPOSE_FILE} up -d"
                            bat 'powershell -Command "Start-Sleep -Seconds 15"'
                            bat "docker-compose -f ${COMPOSE_FILE} ps"

                            // Skip health checks that would require external dependencies
                            echo "‚è≠Ô∏è Skipping application health checks to avoid dependency requirements"
                        } else {
                            echo "üìù No ${COMPOSE_FILE} found, skipping container deployment"
                        }
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "üê≥ Pushing to Docker Hub..."
                        bat 'echo %DOCKERHUB_PASSWORD% | docker login -u %DOCKERHUB_USERNAME% --password-stdin'

                        // Tag and push the image
                        bat "docker tag ${SERVICE_NAME}:latest ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        bat "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"

                        // Also push with build number tag
                        bat "docker tag ${SERVICE_NAME}:latest ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"
                        bat "docker push ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"

                        echo "‚úÖ Docker images pushed successfully!"
                        echo "üè∑Ô∏è Tags: latest, build-${BUILD_NUMBER}"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('Shipping-Service') {
                    // Clean up containers
                    bat 'docker-compose -f docker-compose.yml down --remove-orphans || echo "Cleanup completed"'
                }

                // Create a comprehensive build summary
                def buildSummary = """
=== SHIPPING SERVICE BUILD SUMMARY ===
Build Number: ${BUILD_NUMBER}
Build Status: ${currentBuild.result ?: 'SUCCESS'}
Date: ${new Date()}
Service: Shipping Service (Go ${GO_VERSION})

üìä Reports Available:
- SonarQube: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service
- Trivy Security Reports: Build Artifacts
- Test Coverage: Build Artifacts
- Go Test Results: Available in Jenkins

üîó Quick Links:
- Build Artifacts: ${BUILD_URL}artifact/
- Console Output: ${BUILD_URL}console
- SonarQube Dashboard: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service

üìù Pipeline Summary:
- Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}
- SonarQube: Analysis completed
- Security: Trivy scan completed
- Docker: Images built and pushed
- Go Build: Binary created successfully

üê≥ Docker Images:
- ${DOCKERHUB_REPO}:latest
- ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}
"""
                writeFile file: 'build-summary.txt', text: buildSummary
                archiveArtifacts artifacts: 'build-summary.txt', allowEmptyArchive: true

                echo "üìã ===== SHIPPING SERVICE PIPELINE SUMMARY ====="
                echo "üèóÔ∏è Build Number: ${BUILD_NUMBER}"
                echo "üìä Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}"
                echo "üîç SonarQube: Analysis completed"
                echo "üîí Security: Trivy scan completed"
                echo "üê≥ Docker: Images built and pushed"
                echo "‚ö° Go Binary: Created successfully"
                echo "================================================"
            }
        }
        success {
            echo 'üéâ Shipping Service pipeline completed successfully!'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service'
            echo 'üîí Security scan reports available in Build Artifacts'
            echo 'üê≥ Docker images available on Docker Hub'
            echo '‚úÖ All stages completed without critical errors'
            bat 'docker logout || echo "Logout completed"'
        }
        failure {
            echo 'üí• Shipping Service pipeline failed!'
            echo 'üîç Check logs and reports for issues'
            echo 'üìä SonarQube Dashboard: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service'
            echo 'üîí Check security reports in Build Artifacts'
            bat 'docker logout || echo "Logout completed"'
        }
        unstable {
            echo '‚ö†Ô∏è Shipping Service pipeline completed with warnings!'
            echo 'üìä Quality Gate or tests may have issues'
            echo 'üîç Security vulnerabilities may have been detected'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=E-commerce-Shipping-Service'
            echo 'üìÅ Download detailed reports from Build Artifacts section'
            echo 'üîí Review Trivy security scan results'
        }
    }
}