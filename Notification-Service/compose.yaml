services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: notification-service-mongodb
    environment:
      MONGO_INITDB_DATABASE: Notification-service
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: zakaria
    ports:
      - "27018:27017"  # Different port to avoid conflicts with other services
    volumes:
      - notification_mongodb_data:/data/db
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - notification-network

  # Notification Service Application
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: notification-service-app
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8085:8085"
    environment:
      # MongoDB Configuration
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: Notification-service
      SPRING_DATA_MONGODB_USERNAME: root
      SPRING_DATA_MONGODB_PASSWORD: zakaria
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin

      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-service-group

      # Email Configuration
      EMAIL_USERNAME: zakariarekhla@gmail.com
      EMAIL_PASSWORD: ujcm dbuo ijsn emlz
      EMAIL_FROM: noreply@ecommerce.com
      EMAIL_FROM_NAME: ECommerce Notification System
      BASE_URL: http://localhost:3000

      # JVM Options
      JAVA_OPTS: "-Xmx512m -Xms256m -XX:+UseG1GC"

      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker

      # Logging Configuration
      LOGGING_LEVEL_COM_ECOMMERCE_NOTIFICATION_SERVICE: DEBUG
      LOGGING_LEVEL_ORG_APACHE_KAFKA: WARN
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA: DEBUG

      # Actuator Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always

    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8085/api/notifications/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - notification-network

volumes:
  notification_mongodb_data:
    driver: local

networks:
  notification-network:
    driver: bridge