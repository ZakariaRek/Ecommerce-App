pipeline {
    agent any
    tools {
        maven "Maven-3.9.7"
    }
    environment {
        COMPOSE_FILE = 'compose.yaml'
        DOCKERHUB_CREDENTIALS = 'yahya.zakaria-dockerhub'
        DOCKERHUB_REPO = 'yahyazakaria123/ecommerce-app-order-service'
        IMAGE_TAG = 'latest'
        GIT_CREDENTIALS_ID = 'GithubCredentials'

        // Trivy configuration
        TRIVY_CACHE_DIR = 'C:\\temp\\trivy-cache'
        TRIVY_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-db'
        TRIVY_JAVA_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-java-db'
    }
    stages {

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ZakariaRek/Ecommerce-App',
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'Order-Service/']]]
                    ]
                ])
            }
        }

        stage('Build Application') {
            steps {
                dir('Order-Service') {
                    script {
                        echo "üßπ Cleaning and compiling application..."
                        bat '''
                            mvn clean compile ^
                                -Dmaven.compiler.source=17 ^
                                -Dmaven.compiler.target=17 ^
                                -Dmaven.compiler.release=17
                        '''
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('Order-Service') {
                    script {
                        echo "üß™ Running tests..."
                        // Run tests but don't fail the pipeline
                        def testResult = bat(
                            script: '''
                                mvn test ^
                                    -Dmaven.test.failure.ignore=true ^
                                    -Dspring.profiles.active=test ^
                                    -Dmaven.compiler.source=17 ^
                                    -Dmaven.compiler.target=17 ^
                                    -Dmaven.compiler.release=17
                            ''',
                            returnStatus: true
                        )
                        if (testResult != 0) {
                            echo "‚ö†Ô∏è Some tests failed, but continuing with analysis"
                            env.TESTS_FAILED = 'true'
                        } else {
                            echo "‚úÖ All tests passed!"
                            env.TESTS_FAILED = 'false'
                        }
                    }
                }
            }
            post {
                always {
                    dir('Order-Service') {
                        // Archive test results even if some tests fail
                        junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true
                        // Archive JaCoCo coverage report if it exists
                        script {
                            if (fileExists('target/site/jacoco/jacoco.xml')) {
                                echo "‚úÖ JaCoCo coverage report found"
                                archiveArtifacts artifacts: 'target/site/jacoco/**/*', allowEmptyArchive: true
                            }
                        }
                    }
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Order-Service') {
                    script {
                        echo "üîç Starting SonarQube analysis..."
                        try {
                            // Try with the configured server name first
                            withSonarQubeEnv('sonarqube') {
                                bat '''
                                    mvn sonar:sonar ^
                                        -Dsonar.projectKey=Ecommerce-app ^
                                        -Dsonar.projectName="Ecommerce-app" ^
                                        -Dsonar.projectVersion=%BUILD_NUMBER% ^
                                        -Dsonar.host.url=%SONAR_HOST_URL% ^
                                        -Dsonar.token=%SONAR_AUTH_TOKEN% ^
                                        -Dmaven.test.failure.ignore=true ^
                                        -Dmaven.compiler.source=17 ^
                                        -Dmaven.compiler.target=17
                                '''
                            }
                            echo "‚úÖ SonarQube analysis completed using Jenkins configuration"
                        } catch (Exception e) {
                            echo "‚ùå Jenkins SonarQube config failed: ${e.getMessage()}"
                            echo "üîÑ Trying direct connection with fallback..."

                            // Fallback: Use direct connection with your token
                            bat '''
                                mvn clean verify sonar:sonar ^
                                    -Dsonar.projectKey=E-commerce-Order-Service ^
                                    -Dsonar.projectName="E-commerce Order Service" ^
                                    -Dsonar.host.url=http://localhost:9000 ^
                                    -Dsonar.token=sqa_4b9038ee4ac53217da5fb0466f3dc9886bfafd96 ^
                                    -Dmaven.test.failure.ignore=true ^
                                    -Dmaven.compiler.source=17 ^
                                    -Dmaven.compiler.target=17
                            '''
                            echo "‚úÖ SonarQube analysis completed using direct connection"
                        }
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        echo "üö¶ Checking Quality Gate..."
                        timeout(time: 2, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate failed: ${qg.status}"
                                echo "üìä Quality Gate Details:"
                                echo "   - Project: ${qg.projectStatus?.projectName ?: 'Ecommerce-app'}"
                                echo "   - Status: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                                echo "üîó Check details at: http://localhost:9000/dashboard?id=Ecommerce-app"
                            } else {
                                echo "‚úÖ Quality Gate passed!"
                                echo "üéâ Code quality meets the defined standards"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Quality Gate check failed or timed out: ${e.getMessage()}"
                        echo "üìù Possible causes:"
                        echo "   - SonarQube server unreachable"
                        echo "   - Quality Gate not configured"
                        echo "   - Webhook not configured"
                        echo "üìä Check SonarQube dashboard manually: http://localhost:9000"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Package Application') {
            steps {
                dir('Order-Service') {
                    script {
                        echo "üì¶ Packaging application..."
                        bat '''
                            mvn package -DskipTests ^
                                -Dmaven.compiler.source=17 ^
                                -Dmaven.compiler.target=17 ^
                                -Dmaven.compiler.release=17
                        '''

                        // Verify JAR was created
                        echo "‚úÖ Verifying JAR file creation..."
                        bat 'dir target'
                        bat 'dir target\\*.jar'

                        // Check for the specific pattern and create standardized name if needed
                        script {
                            def jarCheck = bat(script: 'dir target\\Order-Service-*.jar', returnStatus: true)
                            if (jarCheck != 0) {
                                echo "‚ö†Ô∏è Order-Service-*.jar not found with expected pattern"
                                echo "üîç Available JAR files:"
                                bat 'dir target\\*.jar'

                                // Try to find and rename JAR if needed
                                echo "üîÑ Creating standardized JAR name..."
                                bat '''
                                    for %%f in (target\\*.jar) do (
                                        if not "%%f"=="target\\Order-Service-app.jar" (
                                            echo Copying %%f to target\\Order-Service-app.jar
                                            copy "%%f" "target\\Order-Service-app.jar"
                                        )
                                    )
                                '''
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                dir('Order-Service') {
                    script {
                        // Debug: List files to see what's available
                        echo "üîç Checking build environment..."
                        bat '''
                            echo "=== Current Directory Structure ==="
                            dir
                            echo "=== Target Directory ==="
                            if exist target (dir target) else (echo Target directory not found)
                            echo "=== Checking for required files ==="
                            if exist pom.xml (echo "‚úÖ pom.xml found") else (echo "‚ùå pom.xml missing")
                            if exist src\\nul (echo "‚úÖ src directory found") else (echo "‚ùå src directory missing")
                            if exist Dockerfile (echo "‚úÖ Dockerfile found") else (echo "‚ùå Dockerfile missing")
                            if exist target\\*.jar (echo "‚úÖ JAR file found") else (echo "‚ùå JAR file missing")
                        '''

                        // Check if JAR exists before Docker build
                        script {
                            def jarExists = bat(script: 'if exist target\\*.jar (exit 0) else (exit 1)', returnStatus: true)

                            if (jarExists == 0) {
                                echo "üê≥ Building Docker image..."

                                // Show Dockerfile content for debugging
                                if (fileExists('Dockerfile')) {
                                    echo "üìã Dockerfile contents:"
                                    bat 'type Dockerfile'
                                }

                                // Build Docker image
                                bat "docker build -t order-service:latest ."

                                // Verify image was created (but don't test connectivity)
                                bat "docker images order-service:latest"
                                echo "‚úÖ Docker image built successfully"

                                // Skip connectivity test to avoid Kafka connection issues
                                echo "‚è≠Ô∏è Skipping Docker image connectivity test to avoid Kafka connection issues"

                            } else {
                                error "‚ùå No JAR file found in target directory! Maven build may have failed."
                            }
                        }

                        // Build with docker-compose if available
                        if (fileExists("${COMPOSE_FILE}")) {
                            echo "üê≥ Building with docker-compose..."
                            bat "docker-compose -f ${COMPOSE_FILE} build"
                        } else {
                            echo "üìù No ${COMPOSE_FILE} found, skipping compose build"
                        }
                    }
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                dir('Order-Service') {
                    script {
                        try {
                            // Install Trivy if not already installed (Windows)
                            bat '''
                                @echo off
                                where trivy >nul 2>&1
                                if errorlevel 1 (
                                    echo üì• Installing Trivy for Windows...
                                    powershell -Command "Invoke-WebRequest -Uri https://github.com/aquasecurity/trivy/releases/download/v0.48.3/trivy_0.48.3_Windows-64bit.zip -OutFile trivy.zip"
                                    powershell -Command "Expand-Archive -Path trivy.zip -DestinationPath . -Force"
                                    if exist C:\\Windows\\System32\\trivy.exe (
                                        echo ‚úÖ Trivy already in system path
                                    ) else (
                                        move trivy.exe C:\\Windows\\System32\\
                                    )
                                    del trivy.zip
                                    echo ‚úÖ Trivy installed successfully
                                ) else (
                                    echo ‚úÖ Trivy is already installed
                                    trivy --version
                                )
                            '''

                            // Create cache directory
                            bat "if not exist \"${TRIVY_CACHE_DIR}\" mkdir \"${TRIVY_CACHE_DIR}\""

                            // Update Trivy database
                            echo "üìö Updating Trivy vulnerability database..."
                            bat """
                                trivy image --download-db-only --cache-dir "${TRIVY_CACHE_DIR}"
                            """

                            // Scan the Docker image for vulnerabilities
                            echo "üîç Scanning Docker image: order-service:latest"
                            bat """
                                trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format table --output trivy-report.txt order-service:latest || echo "Scan completed with warnings"
                            """

                            // Generate JSON report for detailed analysis
                            bat """
                                trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format json --output trivy-report.json order-service:latest || echo "JSON report completed"
                            """

                            // Check for HIGH and CRITICAL vulnerabilities
                            def exitCode = bat(
                                script: """
                                    trivy image --cache-dir "${TRIVY_CACHE_DIR}" --severity HIGH,CRITICAL --exit-code 1 order-service:latest
                                """,
                                returnStatus: true
                            )

                            // Archive the reports
                            archiveArtifacts artifacts: 'trivy-report.*', fingerprint: true, allowEmptyArchive: true

                            // Set build status based on results
                            if (exitCode == 0) {
                                echo "‚úÖ No HIGH or CRITICAL vulnerabilities found!"
                            } else {
                                echo "‚ö†Ô∏è HIGH or CRITICAL vulnerabilities detected!"
                                echo "üìÑ Please review the security reports in build artifacts"
                                currentBuild.result = 'UNSTABLE'
                            }

                        } catch (Exception e) {
                            echo "‚ùå Trivy scan failed: ${e.getMessage()}"
                            echo "üìÑ This might be due to network issues or missing dependencies"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Run Containers') {
            steps {
                dir('Order-Service') {
                    script {
                        // Only run containers if compose file exists and we want to test deployment
                        if (fileExists("${COMPOSE_FILE}")) {
                            echo "üê≥ Starting containers with docker-compose..."
                            bat "docker-compose -f ${COMPOSE_FILE} up -d"
                            bat 'powershell -Command "Start-Sleep -Seconds 10"'
                            bat "docker-compose -f ${COMPOSE_FILE} ps"

                            // Skip health checks that would connect to Kafka
                            echo "‚è≠Ô∏è Skipping application health checks to avoid Kafka connection requirements"
                        } else {
                            echo "üìù No ${COMPOSE_FILE} found, skipping container deployment"
                        }
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "üê≥ Pushing to Docker Hub..."
                        bat 'echo %DOCKERHUB_PASSWORD% | docker login -u %DOCKERHUB_USERNAME% --password-stdin'

                        // Tag and push only the latest image
                        bat "docker tag order-service:latest ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        bat "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"

                        echo "‚úÖ Docker image pushed successfully with latest tag!"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('Order-Service') {
                    // Clean up containers
                    bat 'docker-compose -f compose.yaml down --remove-orphans || echo "Cleanup completed"'
                }

                // Create a comprehensive build summary
                def buildSummary = """
=== ORDER SERVICE BUILD SUMMARY ===
Build Number: ${BUILD_NUMBER}
Build Status: ${currentBuild.result ?: 'SUCCESS'}
Date: ${new Date()}

üìä Reports Available:
- SonarQube: http://localhost:9000/dashboard?id=Ecommerce-app
- Trivy Security Reports: Build Artifacts
- Test Results: Available in Jenkins

üîó Quick Links:
- Build Artifacts: ${BUILD_URL}artifact/
- Console Output: ${BUILD_URL}console
- SonarQube Dashboard: http://localhost:9000/dashboard?id=Ecommerce-app

üìù Pipeline Summary:
- Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}
- SonarQube: Analysis completed
- Security: Trivy scan completed
- Docker: Images built and pushed
- Kafka: Connection tests skipped (by design)
"""
                writeFile file: 'build-summary.txt', text: buildSummary
                archiveArtifacts artifacts: 'build-summary.txt', allowEmptyArchive: true

                echo "üìã ===== ORDER SERVICE PIPELINE SUMMARY ====="
                echo "üèóÔ∏è Build Number: ${BUILD_NUMBER}"
                echo "üìä Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}"
                echo "üîç SonarQube: Analysis completed"
                echo "üîí Security: Trivy scan completed"
                echo "üê≥ Docker: Images built and pushed"
                echo "‚è≠Ô∏è Kafka: Connection tests skipped"
                echo "============================================"
            }
        }
        success {
            echo 'üéâ Order Service pipeline completed successfully!'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=Ecommerce-app'
            echo 'üîí Security scan reports available in Build Artifacts'
            echo 'üê≥ Docker images available on Docker Hub'
            echo '‚úÖ All stages completed without critical errors'
            bat 'docker logout || echo "Logout completed"'
        }
        failure {
            echo 'üí• Order Service pipeline failed!'
            echo 'üîç Check logs and reports for issues'
            echo 'üìä SonarQube Dashboard: http://localhost:9000/dashboard?id=Ecommerce-app'
            echo 'üîí Check security reports in Build Artifacts'
            bat 'docker logout || echo "Logout completed"'
        }
        unstable {
            echo '‚ö†Ô∏è Order Service pipeline completed with warnings!'
            echo 'üìä Quality Gate or tests may have issues'
            echo 'üîç Security vulnerabilities may have been detected'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=Ecommerce-app'
            echo 'üìÅ Download detailed reports from Build Artifacts section'
            echo 'üîí Review Trivy security scan results'
        }
    }
}