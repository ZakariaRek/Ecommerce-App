pipeline {
    agent any
    tools {
        maven "Maven-3.9.7"
        jdk 'jdk-21'
    }
    environment {
        COMPOSE_FILE = 'compose.yaml'
        DOCKERHUB_CREDENTIALS = 'iyminds-dockerhub'
        DOCKERHUB_REPO = 'iyminds/User-transaction-microservice'
        IMAGE_TAG = 'latest'
        GIT_CREDENTIALS_ID = 'GithubCredentials'
    }
    stages {
        
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ZakariaRek/Ecommerce-App',
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'User-Service/']]]
                    ]
                ])
            }
        }
        
        stage('Build Application') {
            steps {
                dir('User-Service') {
                    sh 'mvn clean compile -DskipTests'
                    sh 'mvn package -DskipTests'
                }
            }
        }
        
        stage('Build Docker Images') {
            steps {
                dir('User-Service') {
                    script {
                        // Check if Dockerfile exists
                        if (fileExists('Dockerfile')) {
                            sh "docker build -t user-service:latest ."
                        } else {
                            error "Dockerfile not found in User-Service directory"
                        }
                        
                        // Check if compose file exists
                        if (fileExists("${COMPOSE_FILE}")) {
                            sh "docker-compose -f ${COMPOSE_FILE} build"
                        } else {
                            error "Docker compose file ${COMPOSE_FILE} not found"
                        }
                    }
                }
            }
        }
        
        stage('Run Containers') {
            steps {
                dir('User-Service') {
                    sh "docker-compose -f ${COMPOSE_FILE} up -d"
                    // Wait a bit for containers to start
                    sh 'sleep 10'
                    // Check if containers are running
                    sh "docker-compose -f ${COMPOSE_FILE} ps"
                }
            }
        }
                
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "Retrieved Docker Hub credentials successfully."
                        sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                        
                        // Tag and push the image
                        sh "docker tag user-service:latest ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        sh "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        
                        // Also tag with build number for versioning
                        sh "docker tag user-service:latest ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"
                        sh "docker push ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('User-Service') {
                    sh 'docker-compose -f compose.yaml down --remove-orphans || true'
                }
            }
        }
        success {
            echo 'Deployment was successful!'
            sh 'docker logout'
        }
        failure {
            echo 'Deployment failed!'
            sh 'docker image prune -f || true'
            sh 'docker logout || true'
        }
    }
}