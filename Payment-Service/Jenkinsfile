pipeline {
    agent any
     tools {
        // Go tool - make sure Go 1.24+ is configured in Jenkins
        go "Go-1.24"
        // Reference the SonarQube Scanner configured in Global Tool Configuration (exact name from Jenkins)
      'hudson.plugins.sonar.SonarRunnerInstallation' "Sonarqube Scanner"  // This was correct!
    }

    environment {
        COMPOSE_FILE = 'compose.yaml'
        DOCKERHUB_CREDENTIALS = 'yahya.zakaria-dockerhub'
        DOCKERHUB_REPO = 'yahyazakaria123/ecommerce-app-payment-service'
        IMAGE_TAG = 'latest'
        GIT_CREDENTIALS_ID = 'git-https-token'
        // Go specific environment
        GOPROXY = 'https://proxy.golang.org,direct'
        GOSUMDB = 'sum.golang.org'
        CGO_ENABLED = '0'
        GOOS = 'linux'
        GOARCH = 'amd64'
        // Trivy configuration
        TRIVY_CACHE_DIR = 'C:\\temp\\trivy-cache'
        TRIVY_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-db'
        TRIVY_JAVA_DB_REPOSITORY = 'ghcr.io/aquasecurity/trivy-java-db'
        // SonarQube configuration
        SONAR_SCANNER_PATH = 'C:\\sonar-scanner\\bin'
    }
    stages {

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM',
                    branches: [[name: '*/main']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/ZakariaRek/Ecommerce-App',
                        credentialsId: env.GIT_CREDENTIALS_ID
                    ]],
                    extensions: [
                        [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'Payment-Service/']]]
                    ]
                ])
            }
        }

        stage('Setup Go Environment') {
            steps {
                dir('Payment-Service') {
                    script {
                        echo "üîß Setting up Go environment..."
                        bat 'go version'
                        bat 'go env'

                        // Clean workspace module cache (safer than system cache)
                        bat 'if exist "modcache" rmdir /s /q "modcache" || echo "Local cache cleaned"'

                        // Download and verify dependencies with custom cache location
                        withEnv(["GOMODCACHE=${WORKSPACE}\\Payment-Service\\modcache"]) {
                            bat 'go mod tidy'
                            bat 'go mod download'
                            bat 'go mod verify'
                        }
                    }
                }
            }
        }

        stage('Build Application') {
            steps {
                dir('Payment-Service') {
                    script {
                        echo "üèóÔ∏è Building Go application..."
                        withEnv(["GOMODCACHE=${WORKSPACE}\\Payment-Service\\modcache"]) {
                            bat '''
                                go build -v -ldflags="-w -s" -o payment-service.exe main.go
                            '''
                        }
                        echo "‚úÖ Build completed successfully!"
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                dir('Payment-Service') {
                    script {
                        echo "üß™ Running Go tests..."
                        try {
                            // Run tests with coverage using custom cache location
                            withEnv(["GOMODCACHE=${WORKSPACE}\\Payment-Service\\modcache"]) {
                                def testResult = bat(
                                    script: '''
                                        go test -v -race -coverprofile=coverage.out -covermode=atomic ./... > test-results.txt 2>&1
                                        go tool cover -html=coverage.out -o coverage.html
                                    ''',
                                    returnStatus: true
                                )

                                if (testResult != 0) {
                                    echo "‚ö†Ô∏è Some tests failed, but continuing with analysis"
                                    env.TESTS_FAILED = 'true'
                                } else {
                                    echo "‚úÖ All tests passed!"
                                    env.TESTS_FAILED = 'false'
                                }
                            }

                            // Archive test results and coverage
                            if (fileExists('test-results.txt')) {
                                archiveArtifacts artifacts: 'test-results.txt', allowEmptyArchive: true
                            }
                            if (fileExists('coverage.html')) {
                                archiveArtifacts artifacts: 'coverage.html', allowEmptyArchive: true
                            }
                            if (fileExists('coverage.out')) {
                                archiveArtifacts artifacts: 'coverage.out', allowEmptyArchive: true
                            }

                        } catch (Exception e) {
                            echo "‚ùå Test execution failed: ${e.getMessage()}"
                            env.TESTS_FAILED = 'true'
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

stage('SonarQube Analysis') {
    steps {
        dir('Payment-Service') {
            script {
                echo "üîç Starting optimized SonarQube analysis..."

                withSonarQubeEnv('sonarqube') {
                    def scannerHome = tool name: 'Sonarqube Scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

                    // Add timeout to prevent hanging
                    timeout(time: 10, unit: 'MINUTES') {
                        bat """
                            echo "Using Scanner from: ${scannerHome}"
                            "${scannerHome}\\bin\\sonar-scanner.bat" ^
                                -Dsonar.projectKey=ecommerce-payment-service ^
                                -Dsonar.projectName="E-commerce Payment Service" ^
                                -Dsonar.projectVersion=%BUILD_NUMBER% ^
                                -Dsonar.sources=. ^
                                -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**,**/*.exe,**/node_modules/**,**/*.log,**/tmp/**,**/cache/**,**/.git/**,**/modcache/**,**/*.zip,**/*.tar,**/*.gz ^
                                -Dsonar.tests=. ^
                                -Dsonar.test.inclusions=**/*_test.go ^
                                -Dsonar.go.coverage.reportPaths=coverage.out ^
                                -Dsonar.sourceEncoding=UTF-8 ^
                                -Dsonar.scm.disabled=true ^
                                -Dsonar.analysis.mode=publish ^
                                -Dsonar.verbose=false
                        """
                    }
                }
                echo "‚úÖ SonarQube analysis completed"
            }
        }
    }
}

        stage('Quality Gate') {
            steps {
                script {
                    try {
                        timeout(time: 3, unit: 'MINUTES') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                echo "‚ö†Ô∏è Quality Gate failed: ${qg.status}"
                                currentBuild.result = 'UNSTABLE'
                            } else {
                                echo "‚úÖ Quality Gate passed!"
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Quality Gate check failed or timed out: ${e.getMessage()}"
                        echo "üìä Check SonarQube dashboard manually"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                dir('Payment-Service') {
                    script {
                        echo "üê≥ Building Docker images..."

                        // Check if Dockerfile exists
                        if (fileExists('Dockerfile')) {
                            bat "docker build -t payment-service-payment-service:latest -f Dockerfile ."
                        } else {
                            error "Dockerfile not found in Payment-Service directory"
                        }

                        // Check if compose file exists
                        if (fileExists("${COMPOSE_FILE}")) {
                            bat "docker-compose -f ${COMPOSE_FILE} build"
                        } else {
                            error "Docker compose file ${COMPOSE_FILE} not found"
                        }

                        echo "‚úÖ Docker images built successfully!"
                    }
                }
            }
        }

        stage('Security Scan with Trivy') {
            steps {
                dir('Payment-Service') {
                    script {
                        try {
                            // Verify image exists before scanning
                            def imageExists = bat(
                                script: 'docker images -q payment-service-payment-service:latest',
                                returnStatus: true
                            )

                            if (imageExists != 0) {
                                echo "‚ùå Docker image not found, skipping Trivy scan"
                                currentBuild.result = 'UNSTABLE'
                                return
                            }

                            echo "üîç Scanning Docker image: payment-service-payment-service:latest"
                            bat """
                                trivy image --cache-dir "${TRIVY_CACHE_DIR}" --format table --output trivy-report.txt payment-service-payment-service:latest || echo "Scan completed with warnings"
                            """

                            // Archive the Trivy report
                            if (fileExists('trivy-report.txt')) {
                                archiveArtifacts artifacts: 'trivy-report.txt', allowEmptyArchive: true
                                echo "‚úÖ Trivy security scan completed and report archived"
                            } else {
                                echo "‚ö†Ô∏è Trivy report not found"
                            }

                        } catch (Exception e) {
                            echo "‚ùå Trivy scan failed: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
        }

        stage('Run Containers') {
            steps {
                dir('Payment-Service') {
                    bat "docker-compose -f ${COMPOSE_FILE} up -d"
                    bat 'powershell -Command "Start-Sleep -Seconds 15"'
                    bat "docker-compose -f ${COMPOSE_FILE} ps"
                }
            }
        }

        // stage('Health Check') {
        //     steps {
        //         dir('Payment-Service') {
        //             script {
        //                 try {
        //                     // Wait for the service to be ready
        //                     timeout(time: 3, unit: 'MINUTES') {
        //                         waitUntil {
        //                             script {
        //                                 def result = bat(
        //                                     script: 'curl -f http://localhost:8089/health',
        //                                     returnStatus: true
        //                                 )
        //                                 return result == 0
        //                             }
        //                         }
        //                     }
        //                     echo "‚úÖ Payment Service health check passed!"
        //                 } catch (Exception e) {
        //                     echo "‚ö†Ô∏è Health check failed or timed out: ${e.getMessage()}"
        //                     currentBuild.result = 'UNSTABLE'
        //                 }
        //             }
        //         }
        //     }
        // }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKERHUB_CREDENTIALS, usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo "Retrieved Docker Hub credentials successfully."
                        bat 'echo %DOCKERHUB_PASSWORD% | docker login -u %DOCKERHUB_USERNAME% --password-stdin'

                        // Tag and push the image
                        bat "docker tag payment-service-payment-service:latest ${DOCKERHUB_REPO}:${IMAGE_TAG}"
                        bat "docker push ${DOCKERHUB_REPO}:${IMAGE_TAG}"

                        // Also tag with build number for versioning
                        bat "docker tag payment-service-payment-service:latest ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"
                        bat "docker push ${DOCKERHUB_REPO}:build-${BUILD_NUMBER}"

                        echo "‚úÖ Docker images pushed successfully!"
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                dir('Payment-Service') {
                    // Clean up containers
                    bat 'docker-compose -f compose.yaml down --remove-orphans || echo "Cleanup completed"'

                    // Clean up Go build artifacts
                    bat 'del /f /q payment-service.exe || echo "Build artifacts cleaned"'
                }

                // Summary report
                echo "üìã ===== PAYMENT SERVICE PIPELINE SUMMARY ====="
                echo "üèóÔ∏è Build Number: ${BUILD_NUMBER}"
                echo "üêπ Go Version: 1.24"
                echo "üìä Tests Status: ${env.TESTS_FAILED == 'true' ? '‚ö†Ô∏è Some Failed' : '‚úÖ Passed'}"
                echo "üîç SonarQube: Analysis completed"
                echo "üîí Security: Trivy scan completed"
                echo "üê≥ Docker: Images built and pushed"
                echo "üí≥ Service: Payment Service (Port 8089)"
                echo "================================"
            }
        }
        success {
            echo 'üéâ Payment Service pipeline completed successfully!'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=ecommerce-payment-service'
            echo 'üîí Security scan reports available in Build Artifacts'
            echo 'üê≥ Docker images available on Docker Hub'
            echo 'üí≥ Payment Service running on http://localhost:8089/health'
            bat 'docker logout || echo "Logout completed"'
        }
        failure {
            echo 'üí• Payment Service pipeline failed!'
            echo 'üîç Check logs and reports for issues'
            echo 'üìä SonarQube: http://localhost:9000/dashboard?id=ecommerce-payment-service'
            bat 'docker logout || echo "Logout completed"'
        }
        unstable {
            echo '‚ö†Ô∏è Payment Service pipeline completed with warnings!'
            echo 'üìä Quality Gate or tests may have issues'
            echo 'üîç Security vulnerabilities may have been detected'
            echo 'üìä Check SonarQube dashboard: http://localhost:9000/dashboard?id=ecommerce-payment-service'
            echo 'üìÅ Download reports from Build Artifacts section'
        }
    }
}